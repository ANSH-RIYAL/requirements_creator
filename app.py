import os
import logging
from flask import Flask, render_template, request, flash, redirect, url_for
from src.requirements_creator import RequirementsCreator

# Configure logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "dev-secret-key-change-in-production")

# Initialize RequirementsCreator
requirements_creator = RequirementsCreator()

@app.route('/')
def index():
    """Homepage with full landing page content"""
    return render_template('index.html')

@app.route('/demo')
def demo():
    """Interactive demo page"""
    # Get list of covered libraries for display
    covered_libraries = requirements_creator.list_analyzed_libraries()
    return render_template('demo.html', covered_libraries=covered_libraries)

@app.route('/process-code', methods=['POST'])
def process_code():
    """Process the demo form submission"""
    code_input = request.form.get('code_input', '').strip()
    
    if not code_input:
        flash('Please provide some Python code to analyze.', 'error')
        return redirect(url_for('demo'))
    
    try:
        # Use the actual RequirementsCreator to analyze the code
        requirements = requirements_creator.analyze_code_string(code_input, auto_add_missing=True)
        
        # Get updated list of covered libraries
        covered_libraries = requirements_creator.list_analyzed_libraries()
        
        if requirements:
            # Format the requirements for display
            requirements_output = "# Generated by Requirements Creator\n"
            requirements_output += "# Exact versions based on your code analysis\n"
            
            # Add libraries with exact versions
            for library, version in requirements.items():
                requirements_output += f"{library}{version}\n"
            
            # Also include libraries that were detected but couldn't be version-matched
            # Get all detected libraries from the analysis
            detected_libraries = set()
            try:
                # Re-analyze to get all detected libraries
                all_detected = requirements_creator.code_analyzer.analyze_code_string(code_input)
                detected_libraries = set(all_detected.keys())
            except:
                pass
            
            # Add libraries without versions if they weren't in the requirements
            missing_versions = detected_libraries - set(requirements.keys())
            if missing_versions:
                requirements_output += "\n# Libraries detected but version matching failed\n"
                requirements_output += "# Consider adding these manually or updating the database\n"
                for library in sorted(missing_versions):
                    requirements_output += f"{library}\n"
            
            flash('Code analysis completed successfully!', 'success')
            return render_template('demo.html', 
                                 code_input=code_input, 
                                 requirements_output=requirements_output,
                                 analysis_complete=True,
                                 covered_libraries=covered_libraries)
        else:
            # Even if no exact versions found, show detected libraries without versions
            requirements_output = "# Generated by Requirements Creator\n"
            requirements_output += "# No exact versions found - libraries detected but not in database\n"
            requirements_output += "# Consider adding these libraries to the database for version matching\n\n"
            
            try:
                all_detected = requirements_creator.code_analyzer.analyze_code_string(code_input)
                for library in sorted(all_detected.keys()):
                    requirements_output += f"{library}\n"
            except:
                requirements_output += "# Error analyzing code\n"
            
            flash('No exact versions found, but detected libraries are listed below.', 'warning')
            return render_template('demo.html', 
                                 code_input=code_input, 
                                 requirements_output=requirements_output,
                                 analysis_complete=True,
                                 covered_libraries=covered_libraries)
    
    except Exception as e:
        flash(f'Error analyzing code: {str(e)}', 'error')
        return render_template('demo.html', 
                             code_input=code_input, 
                             analysis_complete=False,
                             covered_libraries=requirements_creator.list_analyzed_libraries())

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True) 